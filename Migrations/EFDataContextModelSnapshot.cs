// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using StudyMaster.Data;
using System;

namespace StudyMaster.Migrations
{
    [DbContext(typeof(EFDataContext))]
    partial class EFDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudyMaster.Data.Entities.Exam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("StudyMaster.Data.Entities.Lecture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("StudyMaster.Data.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AContent")
                        .IsRequired();

                    b.Property<string>("BContent")
                        .IsRequired();

                    b.Property<string>("CContent")
                        .IsRequired();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("CorrectAnswer");

                    b.Property<string>("DContent")
                        .IsRequired();

                    b.Property<long>("ExamId");

                    b.Property<string>("explain")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("StudyMaster.Data.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudyMaster.Data.Entities.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ExamId");

                    b.Property<long?>("LectureId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("LectureId")
                        .IsUnique()
                        .HasFilter("[LectureId] IS NOT NULL");

                    b.HasIndex("SubjectId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("StudyMaster.Data.Entities.Question", b =>
                {
                    b.HasOne("StudyMaster.Data.Entities.Exam", "Exam")
                        .WithMany("Products")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudyMaster.Data.Entities.Topic", b =>
                {
                    b.HasOne("StudyMaster.Data.Entities.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId");

                    b.HasOne("StudyMaster.Data.Entities.Lecture", "Lecture")
                        .WithOne("Topic")
                        .HasForeignKey("StudyMaster.Data.Entities.Topic", "LectureId");

                    b.HasOne("StudyMaster.Data.Entities.Subject", "Subject")
                        .WithMany("Products")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
